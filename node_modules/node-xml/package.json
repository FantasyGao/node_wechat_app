{
  "_args": [
    [
      {
        "raw": "node-xml",
        "scope": null,
        "escapedName": "node-xml",
        "name": "node-xml",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "C:\\Users\\gaotingrong\\Desktop\\node\\node_wechat"
    ]
  ],
  "_from": "node-xml@latest",
  "_id": "node-xml@1.0.2",
  "_inCache": true,
  "_location": "/node-xml",
  "_phantomChildren": {},
  "_requested": {
    "raw": "node-xml",
    "scope": null,
    "escapedName": "node-xml",
    "name": "node-xml",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER"
  ],
  "_resolved": "https://registry.npmjs.org/node-xml/-/node-xml-1.0.2.tgz",
  "_shasum": "cea59082b100c70337111ca53e1f38f829e3bccb",
  "_shrinkwrap": null,
  "_spec": "node-xml",
  "_where": "C:\\Users\\gaotingrong\\Desktop\\node\\node_wechat",
  "author": {
    "name": "Rob Righter",
    "email": "robrighter@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/robrighter/node-xml/issues"
  },
  "dependencies": {},
  "description": "An xml parser for node.js written in Javascript.",
  "devDependencies": {},
  "directories": {
    "lib": "./lib"
  },
  "dist": {
    "shasum": "cea59082b100c70337111ca53e1f38f829e3bccb",
    "tarball": "https://registry.npmjs.org/node-xml/-/node-xml-1.0.2.tgz"
  },
  "engines": {
    "node": ">=0.1.93"
  },
  "homepage": "https://github.com/robrighter/node-xml",
  "main": "./lib/node-xml",
  "maintainers": [
    {
      "name": "robrighter",
      "email": "robrighter@gmail.com"
    }
  ],
  "name": "node-xml",
  "optionalDependencies": {},
  "readme": "node-xml\n===================\n\n(C) Rob Righter (@robrighter) 2009 - 2010, Licensed under the MIT-LICENSE\nContributions from David Joham\n\n node-xml is an xml parser for node.js written in javascript. \n\n \nAPI\n---\n \n\nSaxParser\n---------\n\nNode-xml provides a SAX2 parser interface that can take a string, file. The parser can take characters from the document in chunks. To send chunks of the document to the parser use 'parseString(xml)'\n\n#SAX Parser#\n\n##new xml.SaxParser()##\n\t* Instantiate a new SaxParser\n\t* returns: a SaxParser object\n\n##new xml.SaxParser(callback)##\n\t* Instantiate a new SaxParser\n\t* returns: a SaxParser object\n\t* Arguments\n\t\t*callback - a function that accepts the new sax parser as an argument\n\t\n#Parse#\n\n##parser.parseString(string)##\n\nParse an in memory string\n* return: boolean. true if no errors, false otherwise\n* Arguments\n\t* string - a string representing the document to parse\n\n##parser.parseFile(filename)##\n\nParse a file\n* return: boolean. true if no errors, false otherwise\n* Arguments\n\t* filename - a string representing the file to be parsed\n\t\n##parser.pause()##\npauses parsing of the document\n\n##parser.resume()##\nresumes parsing of the document\n\n#Callbacks#\n\n##parser.onStartDocument(function() {})##\n\nCalled at the start of a document\n\n##parse.onEndDocument(function() {})##\n\n Called at the end of the document parse\n\n##parser.onStartElementNS(function(elem, attrs, prefix, uri, namespaces) {})##\n\nCalled on an open element tag\n* Arguments\n\t* elem - a string representing the element name\n\t* attrs - an array of arrays: [[key, value], [key, value]]\n\t* prefix - a string representing the namespace prefix of the element\n\t* uri - the namespace URI of the element\n\t* namespaces - an array of arrays: [[prefix, uri], [prefix, uri]]\n\n##parser.onEndElementNS(function(elem, prefix, uri) {})##\n\nCalled at the close of an element\n* Arguments\n\t* elem - a string representing the element name\n    * prefix - a string representing the namespace prefix of the element\n    * uri - the namespace URI of the element\n\n##parser.onCharacters(function(chars) {})##\n\nCalled when a set of content characters is encountered\n* Arguments\n\t* chars - a string of characters\n\n##parser.onCdata(function(cdata) {})##\n\nCalled when a CDATA is encountered\n* Arguments\n\t* cdata - a string representing the CDATA\n\n##parser.onComment(function(msg) {})##\n\nCalled when a comment is encountered\n* Arguments\n\t* msg - a string representing the comment\n\n##parser.onWarning(function(msg) {})##\n\nCalled when a warning is encountered\n* Arguments\n\t* msg - a string representing the warning message\n\n##parser.onError(function(msg) {})##\n\nCalled when an error is encountered\n   * Arguments\n\t\t* msg - a string representing the error message\n\t\n\nEXAMPLE USAGE\n-------------\n\n\tvar util = require('util');\n\tvar xml = require(\"./lib/node-xml\");\n\t\n\tvar parser = new xml.SaxParser(function(cb) {\n\t  cb.onStartDocument(function() {\n\t\t\n\t  });\n\t  cb.onEndDocument(function() {\n\t\t\n\t  });\n\t  cb.onStartElementNS(function(elem, attrs, prefix, uri, namespaces) {\n\t      util.log(\"=> Started: \" + elem + \" uri=\"+uri +\" (Attributes: \" + JSON.stringify(attrs) + \" )\");\n\t  });\n\t  cb.onEndElementNS(function(elem, prefix, uri) {\n\t      util.log(\"<= End: \" + elem + \" uri=\"+uri + \"\\n\");\n\t         parser.pause();// pause the parser\n\t         setTimeout(function (){parser.resume();}, 200); //resume the parser\n\t  });\n\t  cb.onCharacters(function(chars) {\n\t      //util.log('<CHARS>'+chars+\"</CHARS>\");\n\t  });\n\t  cb.onCdata(function(cdata) {\n\t      util.log('<CDATA>'+cdata+\"</CDATA>\");\n\t  });\n\t  cb.onComment(function(msg) {\n\t      util.log('<COMMENT>'+msg+\"</COMMENT>\");\n\t  });\n\t  cb.onWarning(function(msg) {\n\t      util.log('<WARNING>'+msg+\"</WARNING>\");\n\t  });\n\t  cb.onError(function(msg) {\n\t      util.log('<ERROR>'+JSON.stringify(msg)+\"</ERROR>\");\n\t  });\n\t});\n\t\n\n\t//example read from chunks\n\tparser.parseString(\"<html><body>\");\n\tparser.parseString(\"<!-- This is the start\");\n\tparser.parseString(\" and the end of a comment -->\");\n\tparser.parseString(\"and lots\");\n\tparser.parseString(\"and lots of text&am\");\n\tparser.parseString(\"p;some more.\");\n\tparser.parseString(\"<![CD\");\n\tparser.parseString(\"ATA[ this is\");\n\tparser.parseString(\" cdata ]]>\");\n\tparser.parseString(\"</body\");\n\tparser.parseString(\"></html>\");\n\n\t//example read from file\n\tparser.parseFile(\"sample.xml\");\n",
  "repository": {
    "type": "git",
    "url": "git://github.com/robrighter/node-xml.git"
  },
  "version": "1.0.2"
}
